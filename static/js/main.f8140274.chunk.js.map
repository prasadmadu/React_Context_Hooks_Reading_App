{"version":3,"sources":["contexts/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/Bookform.js","App.js","serviceWorker.js","index.js"],"names":["BookContext","createContext","BookContextProvider","props","useState","title","author","id","books","setBooks","bid","Math","random","Provider","value","addBook","removeBook","filter","book","children","Navbar","useContext","className","length","BookDetails","onClick","BookList","map","key","NewBookForm","setTitle","setAuthor","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qLAEaA,EAAcC,0BA4BZC,EA1Ba,SAACC,GAAW,IAAD,EACTC,mBAAS,CACnC,CAAEC,MAAO,oBAAqBC,OAAQ,8BAA4BC,GAAI,GACtE,CAAEF,MAAO,wBAAyBC,OAAQ,mBAAoBC,GAAI,GAClE,CAAEF,MAAO,2BAA4BC,OAAQ,kBAAmBC,GAAI,KAJjC,mBAC7BC,EAD6B,KACtBC,EADsB,KAO/BC,EAAM,WACVC,KAAKC,UAWP,OACE,kBAACZ,EAAYa,SAAb,CAAsBC,MAAO,CAACN,QAAOO,QATvB,SAACV,EAAOC,GACtBG,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEH,QAAOC,SAAQC,GAAI,CAACG,YAQIM,WAL7B,SAACT,GAClBE,EAAUD,EAAMS,QAAQ,SAAAC,GAAI,OAAIA,EAAKX,KAAOA,SAKxCJ,EAAMgB,WCZCC,EAVA,WAAO,IACbZ,EAASa,qBAAWrB,GAApBQ,MACP,OACE,yBAAKc,UAAU,UACb,4CACA,iDAAwBd,EAAMe,OAA9B,8BCKSC,EAVK,SAAC,GAAc,IAAZN,EAAW,EAAXA,KACbF,EAAcK,qBAAWrB,GAAzBgB,WACR,OACE,wBAAIS,QAAS,kBAAMT,EAAWE,EAAKX,MACjC,yBAAKe,UAAU,SAAUJ,EAAKb,OAC9B,yBAAKiB,UAAU,UAAWJ,EAAKZ,UCetBoB,EAnBE,WAAO,IACdlB,EAAUa,qBAAWrB,GAArBQ,MACR,OAAOA,EAAMe,OACX,yBAAKD,UAAU,aACb,4BACId,EAAMmB,KAAI,SAAAT,GACV,OACE,kBAAC,EAAD,CAAaA,KAAMA,EAAMU,IAAKV,EAAKX,UAM3C,yBAAKe,UAAU,SAAf,qBCOWO,EArBK,WAAO,IACjBd,EAAYM,qBAAWrB,GAAvBe,QADgB,EAEGX,mBAAS,IAFZ,mBAEhBC,EAFgB,KAETyB,EAFS,OAGK1B,mBAAS,IAHd,mBAGhBE,EAHgB,KAGRyB,EAHQ,KAYxB,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACFnB,EAASV,EAAOC,GAChBwB,EAAS,IACTC,EAAU,MAKR,2BAAOI,KAAK,OAAOC,YAAY,aAAatB,MAAOT,EAAOgC,SAAU,SAACJ,GAAD,OAAOH,EAASG,EAAEK,OAAOxB,QAAQyB,UAAQ,IAC7G,2BAAOJ,KAAK,OAAOC,YAAY,SAAStB,MAAOR,EAAQ+B,SAAU,SAACJ,GAAD,OAAOF,EAAUE,EAAEK,OAAOxB,QAAQyB,UAAQ,IAC3G,2BAAOJ,KAAK,SAASrB,MAAM,eCDlB0B,MAZf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f8140274.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider = (props) => {\r\n  const [ books, setBooks ] = useState([\r\n    { title: 'The Little Prince', author: 'Antoine de Saint-ExupÃ©ry', id: 1},\r\n    { title: 'The Lord of the Rings', author: 'J. R. R. Tolkien', id: 2},\r\n    { title: 'And Then There Were None', author: 'Agatha Christie', id: 3},\r\n  ])\r\n\r\n  const bid = () => {\r\n    Math.random();\r\n  }\r\n\r\n  const addBook = (title, author) => {\r\n    setBooks([...books, { title, author, id: {bid} }])\r\n  }\r\n\r\n  const removeBook = (id) => {\r\n    setBooks( books.filter( book => book.id !== id))\r\n  }\r\n\r\n  return (\r\n    <BookContext.Provider value={{books, addBook, removeBook}}>\r\n      { props.children }\r\n    </BookContext.Provider>\r\n  )\r\n}\r\n\r\nexport default BookContextProvider;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst Navbar = () => {\r\n  const {books} = useContext(BookContext);\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h1>Reading List</h1>\r\n      <p>Currently You have { books.length} books to get through...</p>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Navbar;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst BookDetails = ({ book }) => {\r\n  const { removeBook} = useContext(BookContext);\r\n  return (\r\n    <li onClick={() => removeBook(book.id) }>\r\n      <div className=\"title\">{ book.title }</div>\r\n      <div className=\"author\">{ book.author }</div>\r\n    </li>\r\n  );\r\n}\r\n \r\nexport default BookDetails;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport BookDetails from './BookDetails';\r\n\r\nconst BookList = () => {\r\n  const { books } = useContext(BookContext)\r\n  return books.length ? (\r\n    <div className=\"book-list\">\r\n      <ul>\r\n        { books.map(book => {\r\n          return (\r\n            <BookDetails book={book} key={book.id} />\r\n          )\r\n        })}\r\n      </ul>\r\n    </div>\r\n  ) : (\r\n    <div className=\"empty\">\r\n      No Books to Read\r\n    </div>\r\n  ) ;\r\n}\r\n \r\nexport default BookList;\r\n","import React, { useContext, useState} from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst NewBookForm = () => {\r\n  const { addBook } = useContext(BookContext);\r\n  const [ title, setTitle] = useState('');\r\n  const [ author, setAuthor] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addBook( title, author );\r\n    setTitle('');\r\n    setAuthor('');\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" placeholder=\"Book Title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n      <input type=\"text\" placeholder=\"Author\" value={author} onChange={(e) => setAuthor(e.target.value)} required />\r\n      <input type=\"submit\" value=\"add book\" />\r\n    </form>\r\n  );\r\n}\r\n \r\nexport default NewBookForm;","import React from 'react';\nimport BookContextProvider from './contexts/BookContext';\nimport Navbar from './components/Navbar';\nimport BookList from './components/BookList';\nimport NewBookForm from './components/Bookform';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <NewBookForm />\n        <BookList/>\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}